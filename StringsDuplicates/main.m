/*******************************************************************************
 * Copyright (c) 2013, Jean-David Gadina <macmade@eosgarden.com>
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/* $Id$ */

int main( int argc, char * argv[] )
{
    @autoreleasepool
    {
        NSString            * path;
        NSString            * data;
        NSArray 			* lines;
        NSString 			* line;
        NSMutableDictionary * labels;
        NSMutableDictionary * duplicates;
        NSString            * key;
        NSString            * value;
        NSError             * error;
        NSRange               r;
        NSUInteger            i;
        
        if( argc != 2 )
        {
            printf( "Usage: StringsDuplicate [FILE_PATH]\n" );
            
            return EXIT_SUCCESS;
        }
        
        error = nil;
        path  = [ NSString stringWithCString: argv[ 1 ] encoding: NSUTF8StringEncoding ];
        
        if( [ [ NSFileManager defaultManager ] fileExistsAtPath: path ] == NO )
        {
            printf( "Error: file %s does not exist\n", path.UTF8String );
            
            return EXIT_FAILURE;
        }
        
        data = [ NSString stringWithContentsOfFile: path encoding: NSUTF8StringEncoding error: &error ];
        
        if( error != nil )
        {
            printf( "Error: %s\n", error.description.UTF8String );
            
            return EXIT_FAILURE;
        }
        
        lines       = [ data componentsSeparatedByString: @"\n" ];
        labels      = [ NSMutableDictionary dictionaryWithCapacity: 100 ];
        duplicates  = [ NSMutableDictionary dictionaryWithCapacity: 100 ];
        i           = 0;
        
        for( line in lines )
        {
            i++;
            
            if( line.length == 0 )
            {
                continue;
            }
            
            key = [ line substringFromIndex: 1 ];
            r   = [ key rangeOfString: @"\"" ];
            
            if( r.location == NSNotFound )
            {
                continue;
            }
            
            key = [ key substringToIndex: r.location ];
            r   = [ line rangeOfString: @"=" ];
            
            if( r.location == NSNotFound )
            {
                continue;
            }
            
            value = [ line substringFromIndex: r.location ];
            r     = [ value rangeOfString: @"\"" ];
            
            if( r.location == NSNotFound )
            {
                continue;
            }
            
            value = [ value substringFromIndex: r.location ];
            
            if( [ labels objectForKey: value ] == nil )
            {
                [ labels setObject: key forKey: value ];
            }
            else if( [ key isEqualToString: [ labels objectForKey: value ] ] )
            {
                printf( "Exact duplicate - Line %04lu: %s (previous declaration: %s)\n", ( unsigned long )i, key.UTF8String, [ [ labels objectForKey: value ] UTF8String ] );
            }
            else
            {
                printf( "Duplicate       - Line %04lu: %s (previous declaration: %s)\n", ( unsigned long )i, key.UTF8String, [ [ labels objectForKey: value ] UTF8String ] );
            }
        }
    }
    
    return EXIT_SUCCESS;
}
